#!/usr/bin/env python

# ansible_cmd
#
# Generate host overview (configuration management database) from ansible fact
# gathering output.
#
# Usage:
#
#   $ ansible -m setup --tree out all
#   $ ansible-cmdb out > cmdb.html
# 

import optparse
import sys
import os
import mako
import pprint

import ansiblecmdb
from mako.template import Template

if __name__ == "__main__":
    parser = optparse.OptionParser(version="%prog v%%MASTER%%")
    parser.set_usage(sys.argv[0] + " [option] <dir> > output.html")
    parser.add_option("-t", "--template", dest="template", action="store", default='html_fancy', help="Template to use. Default is 'html_fancy'")
    parser.add_option("-i", "--inventory", dest="inventory", action="store", default=None, help="Inventory to read extra info from")
    parser.add_option("-f", "--fact-cache", dest="fact_cache", action="store_true", default=False, help="<dir> contains fact-cache files")
    parser.add_option("-p", "--params", dest="params", action="store", default=None, help="Params to send to template")
    parser.add_option("-d", "--debug", dest="debug", action="store_true", default=False, help="Show debug output")
    (options, args) = parser.parse_args()

    if len(args) < 1:
        parser.print_usage()
        sys.stderr.write("The <dir> argument is mandatory\n")
        sys.exit(1)

    # Find out our installation prefix
    data_dir = os.path.join(os.path.dirname(ansiblecmdb.__file__), 'data')
    tpl_dir = os.path.join(data_dir, 'tpl')
    static_dir = os.path.join(data_dir, 'static')
    if options.debug:
        sys.stderr.write('data_dir = {0}\n'.format(data_dir))
        sys.stderr.write('tpl_dir = {0}\n'.format(tpl_dir))
        sys.stderr.write('static_dir = {0}\n'.format(static_dir))

    # Handle template params
    params = {
        'lib_dir': data_dir,  # Backwards compatibility for custom templates < ansible-cmdb v1.7
        'data_dir': data_dir,
        'version': '%%MASTER%%',
    }
    if options.params:
        try:
            for param in options.params.split(','):
                param_key, param_value = param.split('=', 1)
                params[param_key] = param_value
        except ValueError as e:
            sys.stdout.write("Invalid params specified. Should be in format: <key=value>[,<key=value>..]\n")
            sys.exit(1)
        if options.debug:
            sys.stderr.write("Params\n" + 60 * '-' + '\n')
            pprint.pprint(params, stream=sys.stderr)

    ansible = ansiblecmdb.Ansible(args, options.inventory, options.fact_cache, debug=options.debug)

    # Render a template with the gathered host info
    tpl_dir = os.path.join(os.path.dirname(ansiblecmdb.__file__), 'data', 'tpl')
    tpl_path = os.path.join(tpl_dir, '%s.tpl' % (options.template))
    if not os.path.isfile(tpl_path):
        sys.stderr.write("Template not found: {0}\n".format(tpl_path))
        sys.exit(1)

    mytemplate = Template(filename=tpl_path)
    sys.stdout.write(mytemplate.render(hosts=ansible.hosts, **params))
